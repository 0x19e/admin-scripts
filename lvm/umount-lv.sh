#!/bin/bash
#
# -=[ 0x19e Networks ]=-
#
# Mounts a logical volume containing a whole disk (i.e. multiple partitions)
# Uses kpartx to manage block device mappings
#
# Author: Robert W. Baumgartner <rwb@0x19e.net>
#
MOUNTPOINT="/tmp/lvm"

VOLUME="$1"
if [ -z "$1" ]; then
   echo >&2 "Usage: $0 <lv-path> [mountpoint]"
   exit 1
fi
if [ ! -z "$2" ]; then
  MOUNTPOINT="$2"
fi

hash kpartx 2>/dev/null || { echo >&2 "You need to install kpartx. Aborting."; exit 1; }
hash blkid 2>/dev/null || { echo >&2 "You need to install util-linux. Aborting."; exit 1; }
hash awk 2>/dev/null || { echo >&2 "You need to install awk. Aborting."; exit 1; }

# check if superuser
if [[ $EUID -ne 0 ]]; then
   echo >&2 "This script must be run as root."
   exit 1
fi

# Validate mountpoint and LV path
# TODO: More complete checking to ensure a valid LV path.
if [ ! -e "${VOLUME}" ]; then
  echo >&2 "ERROR: Volume '${VOLUME}' does not exist."
  exit 1
fi
if [ ! -e "${MOUNTPOINT}" ]; then
  echo >&2 "ERROR: Mount directory '${MOUNTPOINT}' does not exist."
  exit 1
fi

# Adjust mount point
VOLUME_NAME=$(basename ${VOLUME})
MOUNTPOINT="${MOUNTPOINT}/${VOLUME_NAME}"
if [ ! -e "${MOUNTPOINT}" ]; then
  echo >&2 "ERROR: Mount directory '${MOUNTPOINT}' does not exist."
  exit 1
fi

# Determine mappings that will be generated by kpartx
KPARTX_LIST=`kpartx -l ${VOLUME} | awk '{ print $1 }'`
if ! [ $? -eq 0 ]; then
  echo >&2 "ERROR: Failed to determine kpartx mappings for ${VOLUME}."
  exit 1
fi

declare -a mappings=();
for part in ${KPARTX_LIST}; do
  map="/dev/mapper/${part}"
  mappings=("${mappings[@]}" "${map}")
done

# Process mappings
declare -a unmounted=();
for ((idx=0;idx<=$((${#mappings[@]}-1));idx++)); do
  map=${mappings[$idx]}
  dev=$(readlink -e ${map})
  mnt=$(basename ${map})
  if [ ! -b "$dev" ]; then
    echo >&2 "ERROR: '${map}' does not point to a valid block device; skipping..."
  else
    umount "${map}" > /dev/null 2>&1
    if ! [ $? -eq 0 ]; then
      echo >&2 "ERROR: Failed to unmount ${map}."
    else
      MNT_PATH="${MOUNTPOINT}/${mnt}"
      if [ ! -e "${MNT_PATH}" ]; then
        echo >&2 "WARNING: The path '${MNT_PATH}' does not exist."
      fi
      rm -rf "${MNT_PATH}"
      unmounted=("${unmounted[@]}" "${map}")
    fi
  fi
done

# Unmount and cleanup
for ((idx=0;idx<=$((${#unmounted[@]}-1));idx++)); do
  map=${unmounted[$idx]}
  mnt=$(basename ${map})
  dir="${MOUNTPOINT}/${mnt}"
  echo "Unmounted '${map}' from '${dir}'"
done

# Delete mappings
if ! kpartx -ds ${VOLUME}; then
  echo >&2 "ERROR: Failed to delete mappings for ${VOLUME}."
  exit 1
fi

# Remove top-level mountpoint
rm -rvf "${MOUNTPOINT}"

exit 0
