#!/bin/bash
# Mounts a logical volume containing a whole disk (i.e. multiple partitions)
# Uses kpartx to manage block device mappings
#
MOUNTPOINT="/tmp/lvm"

hash kpartx 2>/dev/null || { echo >&2 "You need to install kpartx. Aborting."; exit 1; }

VOLUME="$1"
if [ -z "$1" ]; then
   echo >&2 "Usage: $0 <lv-path> [mountpoint]"
   exit 1
fi
if [ ! -z "$2" ]; then
  MOUNTPOINT="$2"
fi

# check if superuser
if [[ $EUID -ne 0 ]]; then
   echo >&2 "This script must be run as root."
   exit 1
fi

# Validate mountpoint
if [ ! -e "${MOUNTPOINT}" ]; then
  echo >&2 "ERROR: Mount directory '${MOUNTPOINT}' does not exist."
  exit 1
fi

# Determine mappings that will be generated by kpartx
KPARTX_LIST=`kpartx -l ${VOLUME} | awk '{ print $1 }'`
if ! [ $? -eq 0 ]; then
  echo >&2 "ERROR: Failed to determine kpartx mappings for ${VOLUME}."
  exit 1
fi

declare -a mappings=();
for part in ${KPARTX_LIST}; do
  map="/dev/mapper/${part}"
  mappings=("${mappings[@]}" "${map}")
done

# Create mappings
if ! kpartx -as ${VOLUME}; then
  echo >&2 "ERROR: Failed to create mappings for ${VOLUME}."
  exit 1
fi

# Print out mappings
declare -a mounted=();
for ((idx=0;idx<=$((${#mappings[@]}-1));idx++)); do
  map=${mappings[$idx]}
  dev=$(readlink -e ${map})
  mnt=$(basename ${map})
  if [ ! -b "$dev" ]; then
    echo >&2 "WARNING: '${map}' does not point to a valid block device."
  fi
  if [ ! -z "$(mount | grep ${mnt})" ]; then
    echo >&2 "ERROR: '${map}' is already mounted; aborting..."
    exit 1
  fi

  BLKID=$(blkid "${map}")
  FSTYPE=$(echo $BLKID | grep -Po '(?<=TYPE\=\")[A-Za-z0-9\-\_\s]+(?=\")')
  LABEL=$(echo $BLKID | grep -Po '(?<=LABEL\=\")[A-Za-z0-9\-\_\s]+(?=\")')
  SIZE_MB=$(($(blockdev --getsize64 "${map}") / 1024 / 1024))

  #if [ -z "${LABEL}" ]; then
  #  LABEL="N/A"
  #fi

  MNT_PATH="${MOUNTPOINT}/${mnt}"
  if [ -e "${MNT_PATH}" ]; then
    echo >&2 "WARNING: The path '${MNT_PATH}' already exists; skipping..."
  else
    mkdir "${MNT_PATH}"
    mount "${dev}" "${MNT_PATH}"
    if ! [ $? -eq 0 ]; then
      echo >&2 "ERROR: Failed to mount ${map}."
    else
      mounted=("${mounted[@]}" "${MNT_PATH}")
      if [ -z "${LABEL}" ]; then
        printf "Mounted %s -> %s (Type: %s, Size: %i MB)\n" "${mnt}" "${MNT_PATH}" "${FSTYPE}" "${SIZE_MB}"
      else
        printf "Mounted %s -> %s (Type: %s, Size: %i MB, Label: '%s')\n" "${mnt}" "${MNT_PATH}" "${FSTYPE}" "${SIZE_MB}" "${LABEL}"
      fi
    fi
  fi
done

exit 0
